@import url("https://fonts.googleapis.com/css2?family=Poppins&display=swap");

// Custom variables
$clr-primary: #ffffff;
$clr-accent: #a18aff;
$primary-font: "Poppins", sans-serif;
$primary-font-clr: #717082;
$priority-colors: (
  high-priority: #fd99af,
  medium-priority: #fac608,
  low-priority: #3fd4f4,
);
$error: #dba3ad;

@mixin reset-default-appearance {
  appearance: none;
  border: none;
  background-color: transparent;
  outline: none;
}

@mixin flex($gapValue: false, $vertical: false) {
  display: flex;

  @if $gapValue {
    gap: $gapValue;
  }

  @if $vertical {
    flex-direction: column;
  }
}

// modern css reset
/*
  1. Use a more-intuitive box-sizing model.
*/
*,
*::before,
*::after {
  box-sizing: border-box;
}
/*
  2. Remove default margin
*/
* {
  margin: 0;
  padding: 0;
}
/*
  3. Allow percentage-based heights in the application
*/
html,
body {
  height: 100%;
}
/*
  Typographic tweaks!
  4. Add accessible line-height
  5. Improve text rendering
*/
body {
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
}
/*
  6. Improve media defaults
*/
img,
picture,
video,
canvas,
svg {
  display: block;
  max-width: 100%;
}
/*
  7. Remove built-in form typography styles
*/
input,
button,
textarea,
select {
  font: inherit;
}
/*
  8. Avoid text overflows
*/
p,
h1,
h2,
h3,
h4,
h5,
h6 {
  overflow-wrap: break-word;
}

/*
  9. Create a root stacking context
*/
#root,
#__next {
  isolation: isolate;
}

// General section

body {
  background-color: $clr-accent;
  min-height: 100vh;
}

.container {
  min-height: 100vh;
  font-family: $primary-font;
  color: $primary-font-clr;
}

input:not([type="text"]),
button {
  cursor: pointer;
}

input,
button {
  @include reset-default-appearance();
  color: $primary-font-clr;
}

input[type="text"] {
  width: 100%;
  text-overflow: ellipsis;
  overflow: hidden;
}

header {
  display: flex;
  height: 60px;
  background-color: $clr-primary;
  align-items: center;
  gap: 1em;
  padding-inline: 1em;

  position: sticky;
  top: 0;
  z-index: 100;

  .toggle-nav-btn {
    svg {
      fill: $clr-accent;

      &:hover {
        filter: brightness(90%);
      }
    }

    .line {
      transform-origin: center;
      transition: y 200ms ease-out 200ms, transform 200ms ease-out,
        opacity 150ms 200ms;
    }

    &[aria-expanded="true"] {
      .line {
        transition: y 200ms ease-out, transform 200ms ease-out 200ms,
          opacity 150ms ease-out;
      }

      .line-top {
        transform: rotate(-45deg);
        y: 45px;
      }

      .line-middle {
        opacity: 0;
      }

      .line-bottom {
        transform: rotate(45deg);
        y: 45px;
      }
    }
  }

  .logo {
    font-size: 1.8rem;
    font-weight: 600;
    color: $clr-accent;
  }
}

.edit-btn,
.delete-btn,
.save-btn,
.cancel-btn,
.addTask-btn {
  svg {
    pointer-events: none;

    &.edit-icon {
      transform: translateY(-2px);
    }

    path {
      fill: $primary-font-clr;
    }
  }

  &:hover {
    path {
      fill: $clr-accent;
    }
  }
}

// Nav section

aside {
  height: 100vh;
  width: 100vw;
  background-color: rgba(133, 131, 131, 0.3);
  position: fixed;
  top: 60px;
  z-index: 99;
  display: block;
  visibility: hidden;

  .nav-wrapper {
    @include flex(2em, $vertical: true);
    background-color: $clr-primary;
    box-shadow: 5px 5px 5px 0 rgba(0, 0, 0, 0.3);
    padding: 2.5em 1em;
    height: 100vh;
    width: 300px;
    display: flex;
    transform: translateX(-100%);
    pointer-events: none;
    transition: all 150ms ease-out;
  }

  &[data-state="displayed"] {
    visibility: visible;
  }

  &[data-state="displayed"] .nav-wrapper {
    transform: translateX(0);
    transition: all 200ms ease-in;
    pointer-events: auto;
  }

  ul {
    @include flex(1em, $vertical: true);
    list-style: none;

    li {
      display: flex;
      justify-content: space-between;

      &.active {
        color: $clr-accent;
      }

      span:first-child {
        font-weight: 600;
        cursor: pointer;

        &:hover {
          color: $clr-accent;
        }
      }
    }
  }
}

@media screen and (min-width: 970px) {
  header {
    display: none;
  }

  main {
    display: grid;
    grid-template-columns: 300px 1fr;
  }

  aside {
    position: sticky;
    background-color: transparent;
    visibility: visible;
    width: auto;
    top: 0;

    .nav-wrapper {
      transform: translate(0);
      box-shadow: none;
      pointer-events: auto;
      padding-inline: 2.5em;
    }
  }
}

.projects-container {
  @include flex(1em, $vertical: true);
  gap: 1em;

  .add-project-btn {
    align-self: start;
  }

  .project-form {
    &[data-state="displayed"] {
      display: block;
    }
    &[data-state="hidden"] {
      display: none;
    }
  }

  .btn-container {
    @include flex(1em);
    justify-content: center;

    & *:hover {
      color: $clr-accent;
    }
  }

  .add-project-btn:hover {
    color: $clr-accent;
  }
}

.edit-project-title,
.project-input {
  border-radius: 4px;
  padding: 5px;

  &:valid {
    border: 1px solid $clr-accent;
  }

  &:invalid {
    border: 1px solid $error;
  }
}

// Tasks section

.tasks-container {
  @include flex(1.5em, $vertical: true);
  padding-block: 2rem;
  overflow-x: hidden;
  overflow-y: auto;

  h1 {
    color: $clr-primary;
    border-bottom: 1px solid;
    width: min(1000px, 95%);
    place-self: center;
  }

  .tasks {
    @include flex($vertical: true);
    align-items: center;
    min-height: 12.5em; /* prevents overflow when removing transition played*/
  }

  .task-form,
  .task,
  .edit-form {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 5px;
    align-self: center;
    background-color: $clr-primary;
    padding: 0.8em;
    border-radius: 1em;
    text-align: center;

    &:hover,
    &:focus-within {
      box-shadow: 0 5px 5px rgba(0, 0, 0, 0.3);
    }

    .left-wrapper,
    .right-wrapper {
      @include flex(10px);
      align-items: center;
    }

    .right-wrapper {
      justify-self: end;
    }

    .priority-btns {
      @include flex(5px);
    }
  }

  .task-form {
    width: min(1000px, 95%);
    margin-block: 1em;

    &[data-state="hidden"] {
      display: none;
    }
  }

  .task,
  .edit-form {
    width: min(900px, 95%);
    margin-bottom: 1em;
  }

  .task {
    &[data-status="completed"] {
      filter: brightness(85%);

      .task-title {
        text-decoration: line-through;
      }
    }

    &[data-state="entrance"] {
      opacity: 0;
      animation: slideDown 300ms ease-out forwards;

      @for $i from 1 to 20 {
        &:nth-child(#{$i}) {
          animation-delay: 20ms * $i;
        }
      }
    }

    &[data-state="adding"] {
      animation: slideDown 300ms ease-out forwards;
    }

    &[data-state="removing"] {
      margin: 0;
      opacity: 0;
      padding: 0;
      height: 0;
      overflow: hidden;
      transform: translateY(6.25em);
      transition: 300ms ease-out;
    }
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-75px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .task-form,
  .edit-form {
    padding: 1em;
  }
}

input:is([type="radio"], [type="checkbox"]) {
  $size: 1.125em;

  height: $size;
  width: $size;
  border: 2px solid;
  border-radius: 50%;

  display: grid;
  place-content: center;

  &::after {
    content: "";
    transform: scale(0);
    transition: transform 120ms ease-out;
  }

  &:checked::after {
    transform: scale(1);
  }

  @each $name, $color in $priority-colors {
    &.#{$name} {
      border-color: $color;

      &::after {
        background-color: $color;
      }

      &:checked::after {
        background-color: $color;
      }
    }
  }
}

input[type="radio"] {
  $circle-size: 1em;

  &::after {
    height: $circle-size;
    width: $circle-size;
    border-radius: 50%;
  }
}

input[type="checkbox"] {
  $check-mark-size: 0.75em;

  &::after {
    height: $check-mark-size;
    width: $check-mark-size;
    clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
    transform-origin: bottom left;
  }
}
